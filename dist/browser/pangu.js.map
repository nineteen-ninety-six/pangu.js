{"version":3,"file":"pangu.js","sources":["../../src/browser/pangu.ts"],"sourcesContent":["import { Pangu } from '../shared';\n\nexport interface AutoSpacingPageConfig {\n  pageDelayMs?: number;\n  nodeDelayMs?: number;\n  nodeMaxWaitMs?: number;\n}\n\nexport interface IdleDeadline {\n  didTimeout: boolean;\n  timeRemaining(): number;\n}\n\nexport interface IdleRequestCallback {\n  (deadline: IdleDeadline): void;\n}\n\nexport interface IdleSpacingConfig {\n  enabled: boolean;\n  chunkSize: number;\n  timeout: number;\n}\n\nexport interface VisibilityCheckConfig {\n  enabled: boolean;\n  commonHiddenPatterns: {\n    clipRect: boolean;\n    displayNone: boolean;\n    visibilityHidden: boolean;\n    opacityZero: boolean;\n    heightWidth1px: boolean;\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction once<T extends (...args: any[]) => any>(func: T) {\n  let executed = false;\n  return function (...args: Parameters<T>) {\n    if (executed) {\n      return undefined;\n    }\n    executed = true;\n    return func(...args);\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction debounce<T extends (...args: any[]) => void>(func: T, delay: number, mustRunDelay: number = Infinity) {\n  let timer: number | null = null;\n  let startTime: number | null = null;\n\n  return function (...args: Parameters<T>) {\n    const currentTime = Date.now();\n\n    if (timer) {\n      clearTimeout(timer);\n    }\n\n    if (!startTime) {\n      startTime = currentTime;\n    }\n\n    if (currentTime - startTime >= mustRunDelay) {\n      func(...args);\n      startTime = currentTime;\n    } else {\n      timer = window.setTimeout(() => {\n        func(...args);\n      }, delay);\n    }\n  };\n}\n\nclass IdleQueue {\n  private queue: (() => void)[] = [];\n  private isProcessing = false;\n  private onComplete?: () => void;\n\n  constructor() {\n    // No fallback - require native requestIdleCallback\n  }\n\n  add(work: () => void) {\n    this.queue.push(work);\n    this.scheduleProcessing();\n  }\n\n  clear() {\n    this.queue.length = 0;\n    this.onComplete = undefined;\n  }\n\n  setOnComplete(onComplete?: () => void) {\n    this.onComplete = onComplete;\n  }\n\n  get length() {\n    return this.queue.length;\n  }\n\n  private scheduleProcessing() {\n    if (!this.isProcessing && this.queue.length > 0) {\n      this.isProcessing = true;\n      requestIdleCallback((deadline) => this.process(deadline), { timeout: 5000 });\n    }\n  }\n\n  private process(deadline: IdleDeadline) {\n    while (deadline.timeRemaining() > 0 && this.queue.length > 0) {\n      const work = this.queue.shift();\n      work?.();\n    }\n\n    this.isProcessing = false;\n\n    if (this.queue.length > 0) {\n      this.scheduleProcessing();\n    } else {\n      // All work completed, call completion callback\n      this.onComplete?.();\n    }\n  }\n}\n\nexport class BrowserPangu extends Pangu {\n  public isAutoSpacingPageExecuted = false;\n  public idleQueue = new IdleQueue();\n  public blockTags = /^(div|p|h1|h2|h3|h4|h5|h6)$/i;\n  public ignoredTags = /^(code|pre|script|style|textarea|iframe|input)$/i;\n  public presentationalTags = /^(b|code|del|em|i|s|strong|kbd)$/i;\n  public spaceLikeTags = /^(br|hr|i|img|pangu)$/i;\n  public spaceSensitiveTags = /^(a|del|pre|s|strike|u)$/i;\n  public ignoredClass = 'no-pangu-spacing';\n\n  protected autoSpacingPageObserver: MutationObserver | null = null;\n  protected idleSpacingConfig: IdleSpacingConfig = {\n    enabled: true,\n    chunkSize: 40, // Process 40 text nodes per idle cycle\n    timeout: 2000, // 2 second timeout for idle processing\n  };\n  protected visibilityCheckConfig: VisibilityCheckConfig = {\n    enabled: false,\n    commonHiddenPatterns: {\n      clipRect: true, // clip: rect(1px, 1px, 1px, 1px) patterns\n      displayNone: true, // display: none\n      visibilityHidden: true, // visibility: hidden\n      opacityZero: true, // opacity: 0\n      heightWidth1px: true, // height: 1px; width: 1px\n    },\n  };\n\n  constructor() {\n    super();\n  }\n\n  public autoSpacingPage({ pageDelayMs = 1000, nodeDelayMs = 500, nodeMaxWaitMs = 2000 }: AutoSpacingPageConfig = {}) {\n    if (!(document.body instanceof Node)) {\n      return;\n    }\n\n    if (this.isAutoSpacingPageExecuted) {\n      return;\n    }\n\n    this.isAutoSpacingPageExecuted = true;\n\n    // FIXME\n    // Dirty hack for https://github.com/vinta/pangu.js/issues/117\n    const spacingPageOnce = once(() => {\n      this.spacingPage();\n    });\n    const videos = document.getElementsByTagName('video');\n    if (videos.length === 0) {\n      setTimeout(() => {\n        spacingPageOnce();\n      }, pageDelayMs);\n    } else {\n      for (let i = 0; i < videos.length; i++) {\n        const video = videos[i];\n        if (video.readyState === 4) {\n          setTimeout(() => {\n            spacingPageOnce();\n          }, 3000);\n          break;\n        }\n        video.addEventListener('loadeddata', () => {\n          setTimeout(() => {\n            spacingPageOnce();\n          }, 4000);\n        });\n      }\n    }\n\n    this.setupAutoSpacingPageObserver(nodeDelayMs, nodeMaxWaitMs);\n  }\n\n  public spacingPage() {\n    this.spacingPageTitle();\n    this.spacingPageBody();\n  }\n\n  public spacingPageTitle() {\n    const titleElement = document.querySelector('head > title');\n    if (titleElement) {\n      this.spacingNode(titleElement);\n    }\n  }\n\n  public spacingPageBody() {\n    // Process the entire body element\n    // The collectTextNodes method already filters out:\n    // 1. Whitespace-only text nodes\n    // 2. Text inside ignored tags (script, style, textarea, etc.)\n    // 3. Text inside contentEditable elements\n    // 4. Text inside elements with no-pangu-spacing class\n    this.spacingNode(document.body);\n  }\n\n  public spacingNode(contextNode: Node) {\n    // Use TreeWalker to collect all text nodes in the DOM tree\n    // This handles cases like <div><span>中文</span>\"<span>ABC</span></div> where the quote is a direct child of the div\n    //\n    // The collectTextNodes helper filters out text nodes that contain only whitespace,\n    // ensuring we only process nodes with actual content\n    //\n    // Example HTML with CSS {white-space: pre-wrap}\n    //   <div>\n    //     \"整天等\"\n    //     \"EAS\"\n    //     \"build\"\n    //   </div>\n    //\n    // This creates these text nodes:\n    // 1. \"整天等\"     -> selected (has content)\n    // 2. \"\\n  \"      -> filtered out (whitespace only)\n    // 3. \"EAS\"       -> selected (has content)\n    // 4. \"\\n  \"      -> filtered out (whitespace only)\n    // 5. \"build\"     -> selected (has content)\n    //\n    // Without filtering whitespace, we'd process the whitespace nodes too, which would:\n    // - Impact performance (processing many empty nodes)\n    // - Add complexity (algorithm expects meaningful content)\n    //\n    // However, those filtered whitespace nodes still exist in the DOM and can render as spaces with CSS like {white-space: pre-wrap}.\n    // The processTextNodes method includes logic to detect whitespace between selected text nodes.\n\n    this.spacingNodeWithTreeWalker(contextNode);\n  }\n\n  public spacingElementById(idName: string) {\n    const element = document.getElementById(idName);\n    if (element) {\n      this.spacingNode(element);\n    }\n  }\n\n  public spacingElementByClassName(className: string) {\n    const elements = document.getElementsByClassName(className);\n    for (let i = 0; i < elements.length; i++) {\n      this.spacingNode(elements[i]);\n    }\n  }\n\n  public spacingElementByTagName(tagName: string) {\n    const elements = document.getElementsByTagName(tagName);\n    for (let i = 0; i < elements.length; i++) {\n      this.spacingNode(elements[i]);\n    }\n  }\n\n  public stopAutoSpacingPage() {\n    if (this.autoSpacingPageObserver) {\n      this.autoSpacingPageObserver.disconnect();\n      this.autoSpacingPageObserver = null;\n    }\n\n    this.isAutoSpacingPageExecuted = false;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  protected isContentEditable(node: any) {\n    return node.isContentEditable || (node.getAttribute && node.getAttribute('g_editable') === 'true');\n  }\n\n  protected isSpecificTag(node: Node, tagRegex: RegExp) {\n    return node && node.nodeName && tagRegex.test(node.nodeName);\n  }\n\n  protected isInsideSpecificTag(node: Node, tagRegex: RegExp, checkCurrent = false) {\n    let currentNode = node;\n    if (checkCurrent) {\n      if (this.isSpecificTag(currentNode, tagRegex)) {\n        return true;\n      }\n    }\n    while (currentNode.parentNode) {\n      currentNode = currentNode.parentNode;\n      if (this.isSpecificTag(currentNode, tagRegex)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  protected hasIgnoredClass(node: Node) {\n    // Check the node itself if it's an element\n    if (node instanceof Element && node.classList.contains(this.ignoredClass)) {\n      return true;\n    }\n    // Check the parent node (for text nodes)\n    if (node.parentNode && node.parentNode instanceof Element && node.parentNode.classList.contains(this.ignoredClass)) {\n      return true;\n    }\n    return false;\n  }\n\n  protected canIgnoreNode(node: Node) {\n    let currentNode = node;\n    if (currentNode && (this.isSpecificTag(currentNode, this.ignoredTags) || this.isContentEditable(currentNode) || this.hasIgnoredClass(currentNode))) {\n      // We will skip processing any children of ignored elements, so don't need to check all ancestors\n      return true;\n    }\n    while (currentNode.parentNode) {\n      currentNode = currentNode.parentNode;\n      if (currentNode && (this.isSpecificTag(currentNode, this.ignoredTags) || this.isContentEditable(currentNode))) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  protected isFirstTextChild(parentNode: Node, targetNode: Node) {\n    const { childNodes } = parentNode;\n\n    // 只判斷第一個含有 text 的 node\n    for (let i = 0; i < childNodes.length; i++) {\n      const childNode = childNodes[i];\n      if (childNode.nodeType !== Node.COMMENT_NODE && childNode.textContent) {\n        return childNode === targetNode;\n      }\n    }\n    return false;\n  }\n\n  protected isLastTextChild(parentNode: Node, targetNode: Node) {\n    const { childNodes } = parentNode;\n\n    // 只判斷倒數第一個含有 text 的 node\n    for (let i = childNodes.length - 1; i > -1; i--) {\n      const childNode = childNodes[i];\n      if (childNode.nodeType !== Node.COMMENT_NODE && childNode.textContent) {\n        return childNode === targetNode;\n      }\n    }\n    return false;\n  }\n\n  protected processTextNodes(textNodes: Node[]) {\n    let currentTextNode: Node | null;\n    let nextTextNode: Node | null = null;\n\n    // Process nodes in the order provided\n    for (let i = 0; i < textNodes.length; i++) {\n      currentTextNode = textNodes[i];\n      if (!currentTextNode) {\n        continue;\n      }\n\n      // Skip nodes that should be ignored\n      if (this.canIgnoreNode(currentTextNode)) {\n        nextTextNode = currentTextNode;\n        continue;\n      }\n\n      if (currentTextNode instanceof Text) {\n        // Special handling for standalone quote nodes\n        if (currentTextNode.data.length === 1 && /[\"\\u201c\\u201d]/.test(currentTextNode.data)) {\n          // Check context to determine if space is needed before the quote\n          if (currentTextNode.previousSibling) {\n            const prevNode = currentTextNode.previousSibling;\n            if (prevNode.nodeType === Node.ELEMENT_NODE && prevNode.textContent) {\n              const lastChar = prevNode.textContent.slice(-1);\n              // If previous element ends with CJK, add space before quote\n              if (/[\\u4e00-\\u9fff]/.test(lastChar)) {\n                currentTextNode.data = ` ${currentTextNode.data}`;\n              }\n            }\n          }\n        } else {\n          // Normal text processing\n          const newText = this.spacingText(currentTextNode.data);\n          if (currentTextNode.data !== newText) {\n            currentTextNode.data = newText;\n          }\n        }\n      }\n\n      // Handle nested tag text processing\n      if (nextTextNode) {\n        if (currentTextNode.nextSibling && this.spaceLikeTags.test(currentTextNode.nextSibling.nodeName)) {\n          nextTextNode = currentTextNode;\n          continue;\n        }\n\n        if (!(currentTextNode instanceof Text) || !(nextTextNode instanceof Text)) {\n          continue;\n        }\n\n        // Check if there's already proper spacing between nodes\n        const currentEndsWithSpace = currentTextNode.data.endsWith(' ');\n        const nextStartsWithSpace = nextTextNode.data.startsWith(' ');\n\n        // Check if there's whitespace between the nodes\n        let hasWhitespaceBetween = false;\n\n        // We need to check at different levels of the DOM tree\n        // First, find the highest ancestor that contains only the current text node\n        let currentAncestor = currentTextNode as Node;\n        while (currentAncestor.parentNode && this.isLastTextChild(currentAncestor.parentNode, currentAncestor) && !this.spaceSensitiveTags.test(currentAncestor.parentNode.nodeName)) {\n          currentAncestor = currentAncestor.parentNode;\n        }\n\n        // Find the highest ancestor that contains only the next text node\n        let nextAncestor = nextTextNode as Node;\n        while (nextAncestor.parentNode && this.isFirstTextChild(nextAncestor.parentNode, nextAncestor) && !this.spaceSensitiveTags.test(nextAncestor.parentNode.nodeName)) {\n          nextAncestor = nextAncestor.parentNode;\n        }\n\n        // Check for whitespace between these ancestors\n        let nodeBetween = currentAncestor.nextSibling;\n        while (nodeBetween && nodeBetween !== nextAncestor) {\n          if (nodeBetween.nodeType === Node.TEXT_NODE && nodeBetween.textContent && /\\s/.test(nodeBetween.textContent)) {\n            hasWhitespaceBetween = true;\n            break;\n          }\n          nodeBetween = nodeBetween.nextSibling;\n        }\n\n        // Skip if proper spacing exists\n        if (currentEndsWithSpace || nextStartsWithSpace || hasWhitespaceBetween) {\n          nextTextNode = currentTextNode;\n          continue;\n        }\n\n        const testText = currentTextNode.data.slice(-1) + nextTextNode.data.slice(0, 1);\n        const testNewText = this.spacingText(testText);\n\n        // Special handling for quotes\n        const currentLast = currentTextNode.data.slice(-1);\n        const nextFirst = nextTextNode.data.slice(0, 1);\n        const isQuote = (char: string) => /[\"\\u201c\\u201d]/.test(char);\n        const isCJK = (char: string) => /[\\u4e00-\\u9fff]/.test(char);\n\n        const skipSpacing = (isQuote(currentLast) && isCJK(nextFirst)) || (isCJK(currentLast) && isQuote(nextFirst));\n\n        if (testNewText !== testText && !skipSpacing) {\n          let nextNode: Node = nextTextNode;\n          while (nextNode.parentNode && !this.spaceSensitiveTags.test(nextNode.nodeName) && this.isFirstTextChild(nextNode.parentNode, nextNode)) {\n            nextNode = nextNode.parentNode;\n          }\n\n          let currentNode: Node = currentTextNode;\n          while (currentNode.parentNode && !this.spaceSensitiveTags.test(currentNode.nodeName) && this.isLastTextChild(currentNode.parentNode, currentNode)) {\n            currentNode = currentNode.parentNode;\n          }\n\n          if (currentNode.nextSibling) {\n            if (this.spaceLikeTags.test(currentNode.nextSibling.nodeName)) {\n              nextTextNode = currentTextNode;\n              continue;\n            }\n          }\n\n          if (!this.blockTags.test(currentNode.nodeName)) {\n            if (!this.spaceSensitiveTags.test(nextNode.nodeName)) {\n              if (!this.ignoredTags.test(nextNode.nodeName) && !this.blockTags.test(nextNode.nodeName)) {\n                if (nextTextNode.previousSibling) {\n                  if (!this.spaceLikeTags.test(nextTextNode.previousSibling.nodeName)) {\n                    if (nextTextNode instanceof Text && !nextTextNode.data.startsWith(' ')) {\n                      // Check visibility before adding space\n                      if (!this.shouldSkipSpacingAfterNode(currentTextNode)) {\n                        nextTextNode.data = ` ${nextTextNode.data}`;\n                      }\n                    }\n                  }\n                } else {\n                  if (!this.canIgnoreNode(nextTextNode)) {\n                    if (nextTextNode instanceof Text && !nextTextNode.data.startsWith(' ')) {\n                      // Check visibility before adding space\n                      if (!this.shouldSkipSpacingAfterNode(currentTextNode)) {\n                        nextTextNode.data = ` ${nextTextNode.data}`;\n                      }\n                    }\n                  }\n                }\n              }\n            } else if (!this.spaceSensitiveTags.test(currentNode.nodeName)) {\n              if (currentTextNode instanceof Text && !currentTextNode.data.endsWith(' ')) {\n                // Check visibility before adding space\n                if (!this.shouldSkipSpacingAfterNode(currentTextNode)) {\n                  currentTextNode.data = `${currentTextNode.data} `;\n                }\n              }\n            } else {\n              // Check visibility before inserting space element\n              if (!this.shouldSkipSpacingAfterNode(currentTextNode)) {\n                const panguSpace = document.createElement('pangu');\n                panguSpace.innerHTML = ' ';\n\n                if (nextNode.parentNode) {\n                  if (nextNode.previousSibling) {\n                    if (!this.spaceLikeTags.test(nextNode.previousSibling.nodeName)) {\n                      nextNode.parentNode.insertBefore(panguSpace, nextNode);\n                    }\n                  } else {\n                    nextNode.parentNode.insertBefore(panguSpace, nextNode);\n                  }\n                }\n\n                // Clean up orphaned space element\n                if (!panguSpace.previousElementSibling) {\n                  if (panguSpace.parentNode) {\n                    panguSpace.parentNode.removeChild(panguSpace);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      nextTextNode = currentTextNode;\n    }\n  }\n\n  protected collectTextNodes(contextNode: Node, reverse = false) {\n    const nodes: Text[] = [];\n\n    // Handle edge cases\n    if (!contextNode || contextNode instanceof DocumentFragment) {\n      return nodes;\n    }\n\n    const walker = document.createTreeWalker(contextNode, NodeFilter.SHOW_TEXT, {\n      acceptNode: (node) => {\n        // Skip whitespace-only nodes\n        if (!node.nodeValue || !/\\S/.test(node.nodeValue)) {\n          return NodeFilter.FILTER_REJECT;\n        }\n\n        // Skip nodes that should be ignored (same as canIgnoreNode check)\n        // We need to check the node itself and its ancestors\n        let currentNode = node;\n        while (currentNode) {\n          if (currentNode instanceof Element) {\n            // Check for ignored tags\n            if (this.ignoredTags.test(currentNode.nodeName)) {\n              return NodeFilter.FILTER_REJECT;\n            }\n            // Check for contentEditable\n            if (this.isContentEditable(currentNode)) {\n              return NodeFilter.FILTER_REJECT;\n            }\n            // Check for ignored class\n            if (currentNode.classList.contains(this.ignoredClass)) {\n              return NodeFilter.FILTER_REJECT;\n            }\n          }\n          currentNode = currentNode.parentNode as Node;\n        }\n\n        return NodeFilter.FILTER_ACCEPT;\n      },\n    });\n\n    // Collect all text nodes\n    while (walker.nextNode()) {\n      nodes.push(walker.currentNode as Text);\n    }\n\n    // Return in reverse order if requested\n    return reverse ? nodes.reverse() : nodes;\n  }\n\n  protected spacingNodeWithTreeWalker(contextNode: Node) {\n    // DocumentFragments don't support TreeWalker properly\n    if (!(contextNode instanceof Node) || contextNode instanceof DocumentFragment) {\n      return;\n    }\n\n    // Use TreeWalker to collect text nodes with content\n    const textNodes = this.collectTextNodes(contextNode, true);\n\n    // Choose processing method based on idle spacing configuration\n    if (this.idleSpacingConfig.enabled) {\n      this.processTextNodesWithIdleCallback(textNodes);\n    } else {\n      // Process the collected text nodes using the shared logic (synchronous)\n      this.processTextNodes(textNodes);\n    }\n  }\n\n  protected processTextNodesWithIdleCallback(textNodes: Node[], onComplete?: () => void) {\n    if (textNodes.length === 0) {\n      onComplete?.();\n      return;\n    }\n\n    // IMPORTANT: Don't clear the queue to ensure all text nodes get processed\n    // If there's already work in progress, we'll add to it instead of replacing it\n    // This prevents text from being skipped when dynamic content is added during processing\n\n    // Set up completion callback\n    // NOTE: This overwrites previous callback, which is a limitation when multiple\n    // sources add work to the queue. However, ensuring all text gets processed\n    // is more important than perfect callback handling.\n    if (onComplete) {\n      this.idleQueue.setOnComplete(onComplete);\n    }\n\n    // Split text nodes into chunks\n    const chunkSize = this.idleSpacingConfig.chunkSize;\n    const chunks: Node[][] = [];\n\n    for (let i = 0; i < textNodes.length; i += chunkSize) {\n      chunks.push(textNodes.slice(i, i + chunkSize));\n    }\n\n    // Add each chunk as a work item to the idle queue\n    for (const chunk of chunks) {\n      this.idleQueue.add(() => {\n        this.processTextNodes(chunk);\n      });\n    }\n  }\n\n  protected setupAutoSpacingPageObserver(nodeDelayMs: number, nodeMaxWaitMs: number) {\n    // Disconnect any existing auto-spacing observer\n    if (this.autoSpacingPageObserver) {\n      this.autoSpacingPageObserver.disconnect();\n      this.autoSpacingPageObserver = null;\n    }\n\n    const queue: Node[] = [];\n\n    const debouncedSpacingTitle = debounce(\n      () => {\n        this.spacingPageTitle();\n      },\n      nodeDelayMs,\n      nodeMaxWaitMs,\n    );\n\n    const debouncedSpacingNode = debounce(\n      () => {\n        // NOTE: a single node could be very big which contains a lot of child nodes\n        if (this.idleSpacingConfig.enabled) {\n          // Use idle processing for dynamic content\n          const nodesToProcess = [...queue];\n          queue.length = 0; // Clear the queue\n\n          if (nodesToProcess.length > 0) {\n            // Collect all text nodes from all input nodes\n            const allTextNodes: Node[] = [];\n            for (const node of nodesToProcess) {\n              // Skip DocumentFragments as they don't support TreeWalker properly\n              if (!(node instanceof Node) || node instanceof DocumentFragment) {\n                continue;\n              }\n\n              const textNodes = this.collectTextNodes(node, true);\n              allTextNodes.push(...textNodes);\n            }\n\n            // Process all collected text nodes with idle callback\n            this.processTextNodesWithIdleCallback(allTextNodes);\n          }\n        } else {\n          // Synchronous processing (original behavior)\n          while (queue.length) {\n            const node = queue.shift();\n            if (node) {\n              this.spacingNode(node);\n            }\n          }\n        }\n      },\n      nodeDelayMs,\n      nodeMaxWaitMs,\n    );\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\n    this.autoSpacingPageObserver = new MutationObserver((mutations) => {\n      let titleChanged = false;\n\n      // Element: https://developer.mozilla.org/en-US/docs/Web/API/Element\n      // Text: https://developer.mozilla.org/en-US/docs/Web/API/Text\n      for (const mutation of mutations) {\n        // Skip to avoid double processing - title handled separately by debouncedSpacingTitle()\n        if (mutation.target.parentNode?.nodeName === 'TITLE' || mutation.target.nodeName === 'TITLE') {\n          titleChanged = true;\n          continue;\n        }\n\n        // Queue parent elements for spacing processing\n        switch (mutation.type) {\n          case 'characterData':\n            // Text content changed (e.g., textContent = '新文字new text')\n            const { target: node } = mutation;\n            if (node.nodeType === Node.TEXT_NODE && node.parentNode) {\n              // <p>Hello 世界</p>\n              // \"Hello 世界\" is the text node, <p> is the parent element\n              queue.push(node.parentNode); // Queue parent element, not text node\n            }\n            break;\n          case 'childList':\n            // New nodes added to DOM (e.g., innerHTML change, appendChild)\n            for (const node of mutation.addedNodes) {\n              if (node.nodeType === Node.ELEMENT_NODE) {\n                queue.push(node); // Element added, process its text content\n              } else if (node.nodeType === Node.TEXT_NODE && node.parentNode) {\n                queue.push(node.parentNode); // Text node added, process its parent\n              }\n            }\n            break;\n          default:\n            break;\n        }\n      }\n\n      if (titleChanged) {\n        debouncedSpacingTitle();\n      }\n\n      debouncedSpacingNode();\n    });\n\n    // NOTE: A single MutationObserver can observe multiple targets simultaneously\n    // https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/observe:\n\n    // Observe page content changes\n    this.autoSpacingPageObserver.observe(document.body, {\n      characterData: true,\n      childList: true,\n      subtree: true,\n    });\n\n    // Observe page title changes\n    this.autoSpacingPageObserver.observe(document.head, {\n      characterData: true,\n      childList: true,\n      subtree: true, // Need subtree to observe text node changes inside title\n    });\n  }\n\n  // Idle processing configuration methods\n\n  public updateIdleSpacingConfig(config: Partial<IdleSpacingConfig>) {\n    this.idleSpacingConfig = {\n      ...this.idleSpacingConfig,\n      ...config,\n    };\n  }\n\n  public getIdleSpacingConfig() {\n    return { ...this.idleSpacingConfig };\n  }\n\n  // Visibility check configuration methods\n\n  public updateVisibilityCheckConfig(config: Partial<VisibilityCheckConfig>) {\n    this.visibilityCheckConfig = {\n      ...this.visibilityCheckConfig,\n      ...config,\n    };\n  }\n\n  public getVisibilityCheckConfig() {\n    return { ...this.visibilityCheckConfig };\n  }\n\n  // Visibility checking utility methods\n\n  public isElementVisuallyHidden(element: Element) {\n    if (!this.visibilityCheckConfig.enabled) {\n      return false;\n    }\n\n    const style = getComputedStyle(element);\n    const config = this.visibilityCheckConfig.commonHiddenPatterns;\n\n    // Check display: none\n    if (config.displayNone && style.display === 'none') {\n      return true;\n    }\n\n    // Check visibility: hidden\n    if (config.visibilityHidden && style.visibility === 'hidden') {\n      return true;\n    }\n\n    // Check opacity: 0\n    if (config.opacityZero && parseFloat(style.opacity) === 0) {\n      return true;\n    }\n\n    // Check clip: rect patterns (screen reader only content)\n    if (config.clipRect) {\n      const clip = style.clip;\n      // Common patterns: rect(1px, 1px, 1px, 1px) or rect(0, 0, 0, 0)\n      if (clip && (clip.includes('rect(1px, 1px, 1px, 1px)') || clip.includes('rect(0px, 0px, 0px, 0px)') || clip.includes('rect(0, 0, 0, 0)'))) {\n        return true;\n      }\n    }\n\n    // Check height: 1px; width: 1px patterns\n    if (config.heightWidth1px) {\n      const height = parseInt(style.height, 10);\n      const width = parseInt(style.width, 10);\n\n      if (height === 1 && width === 1) {\n        // Additional checks for common screen reader patterns\n        const overflow = style.overflow;\n        const position = style.position;\n\n        if (overflow === 'hidden' && position === 'absolute') {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  protected shouldSkipSpacingAfterNode(node: Node) {\n    if (!this.visibilityCheckConfig.enabled) {\n      return false;\n    }\n\n    // Check if the node or its parent element is visually hidden\n    let elementToCheck: Element | null = null;\n\n    if (node instanceof Element) {\n      elementToCheck = node;\n    } else if (node.parentElement) {\n      elementToCheck = node.parentElement;\n    }\n\n    if (elementToCheck && this.isElementVisuallyHidden(elementToCheck)) {\n      return true;\n    }\n\n    // Check if any ancestor is visually hidden\n    let currentElement = elementToCheck?.parentElement;\n    while (currentElement) {\n      if (this.isElementVisuallyHidden(currentElement)) {\n        return true;\n      }\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n}\n\nexport const pangu = new BrowserPangu();\n\nexport default pangu;\n"],"names":["node"],"mappings":"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"}