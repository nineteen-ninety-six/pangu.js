{"version":3,"file":"pangu.umd.js","sources":["../../src/shared/index.ts","../../src/browser/pangu.ts","../../src/browser/pangu.umd.ts"],"sourcesContent":["// CJK is short for Chinese, Japanese, and Korean:\n// \\u2e80-\\u2eff CJK Radicals Supplement\n// \\u2f00-\\u2fdf Kangxi Radicals\n// \\u3040-\\u309f Hiragana\n// \\u30a0-\\u30ff Katakana\n// \\u3100-\\u312f Bopomofo\n// \\u3200-\\u32ff Enclosed CJK Letters and Months\n// \\u3400-\\u4dbf CJK Unified Ideographs Extension A\n// \\u4e00-\\u9fff CJK Unified Ideographs\n// \\uf900-\\ufaff CJK Compatibility Ideographs\n//\n// ANS is short for Alphabets, Numbers, and Symbols:\n// A includes A-Za-z\\u0370-\\u03ff\n// N includes 0-9\n// S includes `~!@#$%^&*()-_=+[]{}\\|;:'\",<.>/?\n//\n// All J below does not include \\u30fb\n// Some S below does not include all symbols\n//\n// For more information about Unicode blocks, see\n// https://symbl.cc/en/unicode-table/\n\nconst CJK = '\\u2e80-\\u2eff\\u2f00-\\u2fdf\\u3040-\\u309f\\u30a0-\\u30fa\\u30fc-\\u30ff\\u3100-\\u312f\\u3200-\\u32ff\\u3400-\\u4dbf\\u4e00-\\u9fff\\uf900-\\ufaff';\n\n// Basic character classes\nconst AN = 'A-Za-z0-9';\nconst A = 'A-Za-z';\nconst UPPER_AN = 'A-Z0-9'; // For FIX_CJK_COLON_ANS\n\n// Operators - note the different sets!\nconst OPERATORS_WITH_HYPHEN = '\\\\+\\\\-\\\\*=&'; // For CJK patterns\nconst OPERATORS_NO_HYPHEN = '\\\\+\\\\*=&'; // For ANS_OPERATOR_ANS only\nconst GRADE_OPERATORS = '\\\\+\\\\-\\\\*'; // For single letter grades\n\n// Quotes\nconst QUOTES_FULL = '\\`\"\\u05f4'; // Backtick, straight quote, Hebrew punctuation\n\n// Brackets - different sets!\nconst LEFT_BRACKETS_BASIC = '\\\\(\\\\[\\\\{'; // For AN_LEFT_BRACKET\nconst RIGHT_BRACKETS_BASIC = '\\\\)\\\\]\\\\}'; // For RIGHT_BRACKET_AN\nconst LEFT_BRACKETS_EXTENDED = '\\\\(\\\\[\\\\{<>\\u201c'; // For CJK_LEFT_BRACKET (includes angle brackets + curly quote)\nconst RIGHT_BRACKETS_EXTENDED = '\\\\)\\\\]\\\\}<>\\u201d'; // For RIGHT_BRACKET_CJK\n\n// ANS extended sets - CAREFUL: different symbols!\nconst ANS_CJK_AFTER = `${A}\\u0370-\\u03ff0-9@\\\\$%\\\\^&\\\\*\\\\-\\\\+\\\\\\\\=\\u00a1-\\u00ff\\u2150-\\u218f\\u2700—\\u27bf`; // Has @, no punctuation\nconst ANS_BEFORE_CJK = `${A}\\u0370-\\u03ff0-9\\\\$%\\\\^&\\\\*\\\\-\\\\+\\\\\\\\=\\u00a1-\\u00ff\\u2150-\\u218f\\u2700—\\u27bf`; // No punctuation symbols\n\n// prettier-ignore\n// Unix absolute paths: system dirs + common project paths\n// Examples: /home, /usr/bin, /etc/nginx.conf, /.bashrc, /node_modules/@babel/core, /path/to/your/project\nconst UNIX_ABSOLUTE_FILE_PATH = /\\/(?:\\.?(?:home|root|usr|etc|var|opt|tmp|dev|mnt|proc|sys|bin|boot|lib|media|run|sbin|srv|node_modules|path|project|src|dist|test|tests|docs|templates|assets|public|static|config|scripts|tools|build|out|target|your)|\\.(?:[A-Za-z0-9_\\-]+))(?:\\/[A-Za-z0-9_\\-\\.@\\+\\*]+)*/;\n\n// prettier-ignore\n// Unix relative paths common in documentation and blog posts\n// Examples: src/main.py, dist/index.js, test/spec.js, ./.claude/CLAUDE.md, templates/*.html\nconst UNIX_RELATIVE_FILE_PATH = /(?:\\.\\/)?(?:src|dist|test|tests|docs|templates|assets|public|static|config|scripts|tools|build|out|target|node_modules|\\.claude|\\.git|\\.vscode)(?:\\/[A-Za-z0-9_\\-\\.@\\+\\*]+)+/;\n\n// Windows paths: C:\\Users\\name\\, D:\\Program Files\\, C:\\Windows\\System32\nconst WINDOWS_FILE_PATH = /[A-Z]:\\\\(?:[A-Za-z0-9_\\-\\. ]+\\\\?)+/;\n\nconst ANY_CJK = new RegExp(`[${CJK}]`);\n\n// Handle punctuation after CJK - add space but don't convert to full-width\n// Support multiple consecutive punctuation marks\nconst CJK_PUNCTUATION = new RegExp(`([${CJK}])([!;,\\\\?:]+)(?! )`, 'g');\n// Handle tilde separately for special cases like ~=\nconst CJK_TILDE = new RegExp(`([${CJK}])(~+)(?!=)(?! )`, 'g');\nconst CJK_TILDE_EQUALS = new RegExp(`([${CJK}])(~=)`, 'g');\n// Handle period separately to avoid matching file extensions, multiple dots, and file paths\n// Note: Multiple dots are handled by DOTS_CJK pattern first\nconst CJK_PERIOD = new RegExp(`([${CJK}])(\\\\.)(?![${AN}\\\\./])(?! )`, 'g');\n// Handle colon between AN and CJK\nconst AN_COLON_CJK = new RegExp(`([${AN}])(:)([${CJK}])`, 'g');\nconst DOTS_CJK = new RegExp(`([\\\\.]{2,}|\\u2026)([${CJK}])`, 'g');\n// Special case for colon before uppercase letters/parentheses (convert to full-width)\nconst FIX_CJK_COLON_ANS = new RegExp(`([${CJK}])\\\\:([${UPPER_AN}\\\\(\\\\)])`, 'g');\n\n// The symbol part does not include '\nconst CJK_QUOTE = new RegExp(`([${CJK}])([${QUOTES_FULL}])`, 'g');\nconst QUOTE_CJK = new RegExp(`([${QUOTES_FULL}])([${CJK}])`, 'g');\nconst FIX_QUOTE_ANY_QUOTE = new RegExp(`([${QUOTES_FULL}]+)[ ]*(.+?)[ ]*([${QUOTES_FULL}]+)`, 'g');\n\n// Handle curly quotes with alphanumeric characters\n// These patterns should only apply to curly quotes, not straight quotes\n// Straight quotes are already handled by CJK_QUOTE, QUOTE_CJK and FIX_QUOTE_ANY_QUOTE\nconst QUOTE_AN = new RegExp(`([\\u201d])([${AN}])`, 'g'); // Only closing curly quotes + AN\n\n// Special handling for straight quotes followed by alphanumeric after CJK\n// This catches patterns like: 中文\"ABC where the quote appears to be closing a quoted CJK phrase\nconst CJK_QUOTE_AN = new RegExp(`([${CJK}])(\")([${AN}])`, 'g');\n\nconst CJK_SINGLE_QUOTE_BUT_POSSESSIVE = new RegExp(`([${CJK}])('[^s])`, 'g');\nconst SINGLE_QUOTE_CJK = new RegExp(`(')([${CJK}])`, 'g');\nconst FIX_POSSESSIVE_SINGLE_QUOTE = new RegExp(`([${AN}${CJK}])( )('s)`, 'g');\n\nconst HASH_ANS_CJK_HASH = new RegExp(`([${CJK}])(#)([${CJK}]+)(#)([${CJK}])`, 'g');\nconst CJK_HASH = new RegExp(`([${CJK}])(#([^ ]))`, 'g');\nconst HASH_CJK = new RegExp(`(([^ ])#)([${CJK}])`, 'g');\n\n// The symbol part only includes + - * = & (excluding | / < >)\nconst CJK_OPERATOR_ANS = new RegExp(`([${CJK}])([${OPERATORS_WITH_HYPHEN}])([${AN}])`, 'g');\nconst ANS_OPERATOR_CJK = new RegExp(`([${AN}])([${OPERATORS_WITH_HYPHEN}])([${CJK}])`, 'g');\n// Handle operators between alphanumeric characters when CJK is present in text\n// Note: This pattern excludes hyphens entirely (only + * = &) to avoid conflicts with compound words\nconst ANS_OPERATOR_ANS = new RegExp(`([${AN}])([${OPERATORS_NO_HYPHEN}])([${AN}])`, 'g');\n\n// Hyphens that should be treated as operators (with spaces) rather than word connectors\n// This regex has 3 patterns to catch different cases while preserving compound words:\n// 1. Letter-Letter/Number: A-B, X-5 (spaces added) BUT NOT co-author, X-ray, GPT-5 (preserved)\n// 2. Mixed alphanumeric-number patterns that aren't already protected as compound words\n// 3. Number-Letter: 5-A, 3-B (spaces added) BUT NOT 5-year, 2016-12-26 (preserved)\n// Note: Patterns like GPT4-5, v1-2 are protected by COMPOUND_WORD_PATTERN and won't get spaces\n// The negative lookahead (?![a-z]) prevents matching hyphens followed by lowercase letters\nconst ANS_HYPHEN_ANS_NOT_COMPOUND = new RegExp(`([A-Za-z])(-(?![a-z]))([A-Za-z0-9])|([A-Za-z]+[0-9]+)(-(?![a-z]))([0-9])|([0-9])(-(?![a-z0-9]))([A-Za-z])`, 'g');\n\n// Slash patterns for operator vs separator behavior\nconst CJK_SLASH_CJK = new RegExp(`([${CJK}])([/])([${CJK}])`, 'g');\nconst CJK_SLASH_ANS = new RegExp(`([${CJK}])([/])([${AN}])`, 'g');\nconst ANS_SLASH_CJK = new RegExp(`([${AN}])([/])([${CJK}])`, 'g');\nconst ANS_SLASH_ANS = new RegExp(`([${AN}])([/])([${AN}])`, 'g');\n\n// Special handling for single letter grades/ratings (A+, B-, C*) before CJK\n// These should have space after the operator, not before\n// Use word boundary to ensure it's a single letter, not part of a longer word\nconst SINGLE_LETTER_GRADE_CJK = new RegExp(`\\\\b([${A}])([${GRADE_OPERATORS}])([${CJK}])`, 'g');\n\n// Special handling for < and > as comparison operators (not brackets)\nconst CJK_LESS_THAN = new RegExp(`([${CJK}])(<)([${AN}])`, 'g');\nconst LESS_THAN_CJK = new RegExp(`([${AN}])(<)([${CJK}])`, 'g');\nconst CJK_GREATER_THAN = new RegExp(`([${CJK}])(>)([${AN}])`, 'g');\nconst GREATER_THAN_CJK = new RegExp(`([${AN}])(>)([${CJK}])`, 'g');\n// Handle < and > between alphanumeric characters when CJK is present in text\nconst ANS_LESS_THAN_ANS = new RegExp(`([${AN}])(<)([${AN}])`, 'g');\nconst ANS_GREATER_THAN_ANS = new RegExp(`([${AN}])(>)([${AN}])`, 'g');\n\n// Bracket patterns: ( ) [ ] { } and also < > (though < > are also handled as operators separately)\n// Note: The curly quotes “ ” (\\u201c \\u201d) appear in CJK_LEFT_BRACKET/RIGHT_BRACKET_CJK but are primarily handled in the patterns below\nconst CJK_LEFT_BRACKET = new RegExp(`([${CJK}])([${LEFT_BRACKETS_EXTENDED}])`, 'g');\nconst RIGHT_BRACKET_CJK = new RegExp(`([${RIGHT_BRACKETS_EXTENDED}])([${CJK}])`, 'g');\nconst ANS_CJK_LEFT_BRACKET_ANY_RIGHT_BRACKET = new RegExp(`([${AN}${CJK}])[ ]*([\\u201c])([${AN}${CJK}\\\\-_ ]+)([\\u201d])`, 'g');\nconst LEFT_BRACKET_ANY_RIGHT_BRACKET_ANS_CJK = new RegExp(`([\\u201c])([${AN}${CJK}\\\\-_ ]+)([\\u201d])[ ]*([${AN}${CJK}])`, 'g');\n\nconst AN_LEFT_BRACKET = new RegExp(`([${AN}])(?<!\\\\.[${AN}]*)([${LEFT_BRACKETS_BASIC}])`, 'g');\nconst RIGHT_BRACKET_AN = new RegExp(`([${RIGHT_BRACKETS_BASIC}])([${AN}])`, 'g');\n\n// Special patterns for filesystem paths after CJK\nconst CJK_UNIX_ABSOLUTE_FILE_PATH = new RegExp(`([${CJK}])(${UNIX_ABSOLUTE_FILE_PATH.source})`, 'g');\nconst CJK_UNIX_RELATIVE_FILE_PATH = new RegExp(`([${CJK}])(${UNIX_RELATIVE_FILE_PATH.source})`, 'g');\nconst CJK_WINDOWS_PATH = new RegExp(`([${CJK}])(${WINDOWS_FILE_PATH.source})`, 'g');\n\n// Pattern for Unix paths ending with / followed by CJK\nconst UNIX_ABSOLUTE_FILE_PATH_SLASH_CJK = new RegExp(`(${UNIX_ABSOLUTE_FILE_PATH.source}/)([${CJK}])`, 'g');\nconst UNIX_RELATIVE_FILE_PATH_SLASH_CJK = new RegExp(`(${UNIX_RELATIVE_FILE_PATH.source}/)([${CJK}])`, 'g');\n\nconst CJK_ANS = new RegExp(`([${CJK}])([${ANS_CJK_AFTER}])`, 'g');\nconst ANS_CJK = new RegExp(`([${ANS_BEFORE_CJK}])([${CJK}])`, 'g');\n\nconst S_A = new RegExp(`(%)([${A}])`, 'g');\n\nconst MIDDLE_DOT = /([ ]*)([\\u00b7\\u2022\\u2027])([ ]*)/g;\n\nclass PlaceholderReplacer {\n  private placeholder: string;\n  private items: string[] = [];\n  private index: number = 0;\n  private startDelimiter: string;\n  private endDelimiter: string;\n\n  constructor(placeholder: string, startDelimiter: string, endDelimiter: string) {\n    this.placeholder = placeholder;\n    this.startDelimiter = startDelimiter;\n    this.endDelimiter = endDelimiter;\n  }\n\n  store(item: string): string {\n    this.items[this.index] = item;\n    return `${this.startDelimiter}${this.placeholder}${this.index++}${this.endDelimiter}`;\n  }\n\n  restore(text: string): string {\n    const pattern = new RegExp(`${this.startDelimiter.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}${this.placeholder}(\\\\d+)${this.endDelimiter.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}`, 'g');\n    return text.replace(pattern, (_match, index) => {\n      return this.items[parseInt(index, 10)] || '';\n    });\n  }\n\n  reset(): void {\n    this.items = [];\n    this.index = 0;\n  }\n}\n\nexport class Pangu {\n  version: string;\n\n  constructor() {\n    this.version = '7.0.0';\n  }\n\n  public spacingText(text: string) {\n    if (typeof text !== 'string') {\n      console.warn(`spacingText(text) only accepts string but got ${typeof text}`);\n      return text;\n    }\n\n    if (text.length <= 1 || !ANY_CJK.test(text)) {\n      return text;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n\n    let newText = text;\n\n    // Initialize placeholder managers\n    const htmlTagManager = new PlaceholderReplacer('HTML_TAG_PLACEHOLDER_', '\\uE000', '\\uE001');\n    let hasHtmlTags = false;\n\n    // Early return for HTML processing if no HTML tags present\n    if (newText.includes('<')) {\n      hasHtmlTags = true;\n      // More specific HTML tag pattern:\n      // - Opening tags: <tagname ...> or <tagname>\n      // - Closing tags: </tagname>\n      // - Self-closing tags: <tagname ... />\n      // This pattern ensures we only match actual HTML tags, not just any < > content\n      const HTML_TAG_PATTERN = /<\\/?[a-zA-Z][a-zA-Z0-9]*(?:\\s+[^>]*)?>/g;\n\n      // Replace all HTML tags with placeholders, but process attribute values\n      newText = newText.replace(HTML_TAG_PATTERN, (match) => {\n        // Process attribute values inside the tag\n        const processedTag = match.replace(/(\\w+)=\"([^\"]*)\"/g, (_attrMatch, attrName, attrValue) => {\n          // Process the attribute value with spacing\n          const processedValue = self.spacingText(attrValue);\n          return `${attrName}=\"${processedValue}\"`;\n        });\n\n        return htmlTagManager.store(processedTag);\n      });\n    }\n\n    // Handle multiple dots first (before single period)\n    newText = newText.replace(DOTS_CJK, '$1 $2');\n    \n    // Handle punctuation after CJK - add space but don't convert to full-width\n    newText = newText.replace(CJK_PUNCTUATION, '$1$2 ');\n    // Handle tilde separately for special cases\n    newText = newText.replace(CJK_TILDE, '$1$2 ');\n    newText = newText.replace(CJK_TILDE_EQUALS, '$1 $2 ');\n    // Handle period separately to avoid file extensions\n    newText = newText.replace(CJK_PERIOD, '$1$2 ');\n    // Handle colon between AN and CJK\n    newText = newText.replace(AN_COLON_CJK, '$1$2 $3');\n    // Only convert colon to full-width in specific cases (before uppercase/parentheses)\n    newText = newText.replace(FIX_CJK_COLON_ANS, '$1：$2');\n\n    newText = newText.replace(CJK_QUOTE, '$1 $2');\n    newText = newText.replace(QUOTE_CJK, '$1 $2');\n    newText = newText.replace(FIX_QUOTE_ANY_QUOTE, '$1$2$3');\n\n    // Handle quotes with alphanumeric - closing quotes followed by AN need space\n    newText = newText.replace(QUOTE_AN, '$1 $2');\n    // Opening quotes preceded by AN don't need space (they're handled by other patterns)\n\n    // Handle CJK followed by closing quote followed by alphanumeric\n    newText = newText.replace(CJK_QUOTE_AN, '$1$2 $3');\n\n    // Handle single quotes more intelligently\n    // First, handle possessive case\n    newText = newText.replace(FIX_POSSESSIVE_SINGLE_QUOTE, \"$1's\");\n    \n    // Process single quotes around pure CJK text differently from mixed content\n    const singleQuoteCJKManager = new PlaceholderReplacer('SINGLE_QUOTE_CJK_PLACEHOLDER_', '\\uE030', '\\uE031');\n    \n    // Pattern to match single quotes around pure CJK text (no spaces, no other characters)\n    const SINGLE_QUOTE_PURE_CJK = new RegExp(`(')([${CJK}]+)(')`, 'g');\n    \n    // Protect pure CJK content in single quotes\n    newText = newText.replace(SINGLE_QUOTE_PURE_CJK, (match) => {\n      return singleQuoteCJKManager.store(match);\n    });\n    \n    // Now process other single quote patterns\n    newText = newText.replace(CJK_SINGLE_QUOTE_BUT_POSSESSIVE, '$1 $2');\n    newText = newText.replace(SINGLE_QUOTE_CJK, '$1 $2');\n    \n    // Restore protected pure CJK content\n    newText = singleQuoteCJKManager.restore(newText);\n\n    // Early return for complex patterns that need longer text\n    const textLength = newText.length;\n\n    // Check slash count early to determine hashtag behavior\n    const slashCount = (newText.match(/\\//g) || []).length;\n\n    // Early return for slash processing if no slashes present\n    if (slashCount === 0) {\n      // Apply normal hashtag spacing without slash considerations\n      // HASH_ANS_CJK_HASH pattern needs at least 5 characters\n      if (textLength >= 5) {\n        newText = newText.replace(HASH_ANS_CJK_HASH, '$1 $2$3$4 $5');\n      }\n      newText = newText.replace(CJK_HASH, '$1 $2');\n      newText = newText.replace(HASH_CJK, '$1 $3');\n    } else if (slashCount <= 1) {\n      // Single or no slash - apply normal hashtag spacing\n      // HASH_ANS_CJK_HASH pattern needs at least 5 characters\n      if (textLength >= 5) {\n        newText = newText.replace(HASH_ANS_CJK_HASH, '$1 $2$3$4 $5');\n      }\n      newText = newText.replace(CJK_HASH, '$1 $2');\n      newText = newText.replace(HASH_CJK, '$1 $3');\n    } else {\n      // Multiple slashes - skip hashtag processing to preserve path structure\n      // But add space before final hashtag if it's not preceded by a slash\n      // HASH_ANS_CJK_HASH pattern needs at least 5 characters\n      if (textLength >= 5) {\n        newText = newText.replace(HASH_ANS_CJK_HASH, '$1 $2$3$4 $5');\n      }\n      newText = newText.replace(new RegExp(`([^/])([${CJK}])(#[A-Za-z0-9]+)$`), '$1$2 $3');\n    }\n\n    // Protect compound words from operator spacing\n    const compoundWordManager = new PlaceholderReplacer('COMPOUND_WORD_PLACEHOLDER_', '\\uE010', '\\uE011');\n\n    // Pattern to detect compound words: alphanumeric-alphanumeric combinations that look like compound words/product names\n    // Examples: state-of-the-art, machine-learning, GPT-4o, real-time, end-to-end, gpt-4o, GPT-5, claude-4-opus\n    // Match: word-word(s) where at least one part contains lowercase letters OR contains mix of letters and numbers (like GPT-5)\n    const COMPOUND_WORD_PATTERN = /\\b(?:[A-Za-z0-9]*[a-z][A-Za-z0-9]*-[A-Za-z0-9]+|[A-Za-z0-9]+-[A-Za-z0-9]*[a-z][A-Za-z0-9]*|[A-Za-z]+-[0-9]+|[A-Za-z]+[0-9]+-[A-Za-z0-9]+)(?:-[A-Za-z0-9]+)*\\b/g;\n\n    // Store compound words and replace with placeholders\n    newText = newText.replace(COMPOUND_WORD_PATTERN, (match) => {\n      return compoundWordManager.store(match);\n    });\n\n    // Handle single letter grades (A+, B-, etc.) before general operator rules\n    // This ensures \"A+的\" becomes \"A+ 的\" not \"A + 的\"\n    newText = newText.replace(SINGLE_LETTER_GRADE_CJK, '$1$2 $3');\n\n    newText = newText.replace(CJK_OPERATOR_ANS, '$1 $2 $3');\n    newText = newText.replace(ANS_OPERATOR_CJK, '$1 $2 $3');\n    newText = newText.replace(ANS_OPERATOR_ANS, '$1 $2 $3');\n    newText = newText.replace(ANS_HYPHEN_ANS_NOT_COMPOUND, (match, ...groups) => {\n      // Handle all patterns in the alternation\n      if (groups[0] && groups[1] && groups[2]) {\n        // First pattern: letter-alphanumeric\n        return `${groups[0]} ${groups[1]} ${groups[2]}`;\n      } else if (groups[3] && groups[4] && groups[5]) {\n        // Second pattern: version range (letter+number-number)\n        return `${groups[3]} ${groups[4]} ${groups[5]}`;\n      } else if (groups[6] && groups[7] && groups[8]) {\n        // Third pattern: number-letter\n        return `${groups[6]} ${groups[7]} ${groups[8]}`;\n      }\n      return match;\n    });\n\n    // Handle < and > as comparison operators\n    newText = newText.replace(CJK_LESS_THAN, '$1 $2 $3');\n    newText = newText.replace(LESS_THAN_CJK, '$1 $2 $3');\n    newText = newText.replace(ANS_LESS_THAN_ANS, '$1 $2 $3');\n    newText = newText.replace(CJK_GREATER_THAN, '$1 $2 $3');\n    newText = newText.replace(GREATER_THAN_CJK, '$1 $2 $3');\n    newText = newText.replace(ANS_GREATER_THAN_ANS, '$1 $2 $3');\n\n    // Add space before filesystem paths after CJK\n    newText = newText.replace(CJK_UNIX_ABSOLUTE_FILE_PATH, '$1 $2');\n    newText = newText.replace(CJK_UNIX_RELATIVE_FILE_PATH, '$1 $2');\n    newText = newText.replace(CJK_WINDOWS_PATH, '$1 $2');\n\n    // Add space after Unix paths ending with / before CJK\n    newText = newText.replace(UNIX_ABSOLUTE_FILE_PATH_SLASH_CJK, '$1 $2');\n    newText = newText.replace(UNIX_RELATIVE_FILE_PATH_SLASH_CJK, '$1 $2');\n\n    // Context-aware slash handling: single slash = operator, multiple slashes = separator\n    // But exclude slashes that are part of file paths by protecting them first\n    if (slashCount === 1) {\n      // Temporarily protect file paths from slash operator processing\n      const filePathManager = new PlaceholderReplacer('FILE_PATH_PLACEHOLDER_', '\\uE020', '\\uE021');\n\n      // Store all file paths and replace with placeholders\n      const allFilePathPattern = new RegExp(`(${UNIX_ABSOLUTE_FILE_PATH.source}|${UNIX_RELATIVE_FILE_PATH.source})`, 'g');\n      newText = newText.replace(allFilePathPattern, (match) => {\n        return filePathManager.store(match);\n      });\n\n      // Now apply slash operator spacing\n      newText = newText.replace(CJK_SLASH_CJK, '$1 $2 $3');\n      newText = newText.replace(CJK_SLASH_ANS, '$1 $2 $3');\n      newText = newText.replace(ANS_SLASH_CJK, '$1 $2 $3');\n      newText = newText.replace(ANS_SLASH_ANS, '$1 $2 $3');\n\n      // Restore file paths\n      newText = filePathManager.restore(newText);\n    }\n    // If multiple slashes, treat as separator - do nothing (no spaces)\n\n    // Restore compound words from placeholders\n    newText = compoundWordManager.restore(newText);\n\n    newText = newText.replace(CJK_LEFT_BRACKET, '$1 $2');\n    newText = newText.replace(RIGHT_BRACKET_CJK, '$1 $2');\n    newText = newText.replace(ANS_CJK_LEFT_BRACKET_ANY_RIGHT_BRACKET, '$1 $2$3$4');\n    newText = newText.replace(LEFT_BRACKET_ANY_RIGHT_BRACKET_ANS_CJK, '$1$2$3 $4');\n\n    newText = newText.replace(AN_LEFT_BRACKET, '$1 $2');\n    newText = newText.replace(RIGHT_BRACKET_AN, '$1 $2');\n\n    newText = newText.replace(CJK_ANS, '$1 $2');\n    newText = newText.replace(ANS_CJK, '$1 $2');\n\n    newText = newText.replace(S_A, '$1 $2');\n\n    newText = newText.replace(MIDDLE_DOT, '・');\n\n    // Brackets: <fcontentl> (fcontentl) [fcontentl] {fcontentl}\n    // f: the first character inside the brackets\n    // l: the last character inside the brackets\n    // content: the content inside the brackets but exclude the first and last characters\n    // DO NOT change the first and last characters inside brackets AT ALL\n    // ONLY spacing the content between them\n\n    // Fix spacing inside brackets according to the above rules:\n    // Ensure no unwanted spaces immediately after opening or before closing brackets\n    const fixBracketSpacing = (text: string): string => {\n      // Process each bracket type\n      const processBracket = (pattern: RegExp, openBracket: string, closeBracket: string) => {\n        text = text.replace(pattern, (_match, innerContent) => {\n          if (!innerContent) {\n            return `${openBracket}${closeBracket}`;\n          }\n\n          // Remove spaces at the very beginning and end of content\n          const trimmedContent = innerContent.replace(/^ +| +$/g, '');\n\n          return `${openBracket}${trimmedContent}${closeBracket}`;\n        });\n      };\n\n      // Only process < > as brackets if they're not HTML tags\n      // HTML tags have already been protected by placeholders\n      processBracket(/<([^<>]*)>/g, '<', '>');\n      processBracket(/\\(([^()]*)\\)/g, '(', ')');\n      processBracket(/\\[([^\\[\\]]*)\\]/g, '[', ']');\n      processBracket(/\\{([^{}]*)\\}/g, '{', '}');\n\n      return text;\n    };\n\n    newText = fixBracketSpacing(newText);\n\n    // Restore HTML tags from placeholders (only if HTML processing occurred)\n    if (hasHtmlTags) {\n      newText = htmlTagManager.restore(newText);\n    }\n\n    // TODO: TBD\n    // Final fix for HTML comments: ensure no space after <!--\n    // This is needed because <!-- is not protected as an HTML tag\n    // and the ! character gets spaced by ANS_CJK pattern\n    // newText = newText.replace(/<!--\\s+/g, '<!--');\n\n    return newText;\n  }\n\n  // alias for spacingText()\n  public spacing(text: string) {\n    return this.spacingText(text);\n  }\n\n  public hasProperSpacing(text: string) {\n    return this.spacingText(text) === text;\n  }\n\n  protected convertToFullwidth(symbols: string): string {\n    // prettier-ignore\n    return symbols\n      .replace(/~/g, '～')\n      .replace(/!/g, '！')\n      .replace(/;/g, '；')\n      .replace(/:/g, '：')\n      .replace(/,/g, '，')\n      .replace(/\\./g, '。')\n      .replace(/\\?/g, '？');\n  }\n}\n\nexport const pangu = new Pangu();\n\nexport { ANY_CJK };\n\nexport default pangu;\n","import { Pangu } from '../shared';\n\nexport interface AutoSpacingPageConfig {\n  pageDelayMs?: number;\n  nodeDelayMs?: number;\n  nodeMaxWaitMs?: number;\n}\n\nexport interface PerformanceStats {\n  count: number;\n  avg: number;\n  min: number;\n  max: number;\n  total: number;\n}\n\nexport interface PerformanceReport {\n  [key: string]: PerformanceStats;\n}\n\nexport interface IdleDeadline {\n  didTimeout: boolean;\n  timeRemaining(): number;\n}\n\nexport interface IdleRequestCallback {\n  (deadline: IdleDeadline): void;\n}\n\nexport interface IdleSpacingConfig {\n  enabled: boolean;\n  chunkSize: number;\n  timeout: number;\n}\n\nexport interface VisibilityCheckConfig {\n  enabled: boolean;\n  checkDuringIdle: boolean;\n  commonHiddenPatterns: {\n    clipRect: boolean;\n    displayNone: boolean;\n    visibilityHidden: boolean;\n    opacityZero: boolean;\n    heightWidth1px: boolean;\n  };\n}\n\nexport interface IdleSpacingCallbacks {\n  onComplete?: () => void;\n  onProgress?: (processed: number, total: number) => void;\n}\n\nclass IdleQueue {\n  private queue: (() => void)[] = [];\n  private isProcessing = false;\n  private requestIdleCallback: (callback: IdleRequestCallback, options?: { timeout?: number }) => number;\n  private totalItems = 0;\n  private processedItems = 0;\n  private callbacks: IdleSpacingCallbacks = {};\n\n  constructor() {\n    // Simple fallback for Safari and other browsers without requestIdleCallback\n    if (typeof window.requestIdleCallback === 'function') {\n      this.requestIdleCallback = window.requestIdleCallback.bind(window);\n    } else {\n      // Fallback using setTimeout for browsers without requestIdleCallback (Safari)\n      this.requestIdleCallback = (callback: IdleRequestCallback, _options?: { timeout?: number }) => {\n        const start = performance.now();\n        return window.setTimeout(() => {\n          callback({\n            didTimeout: false,\n            timeRemaining() {\n              // Simulate ~16ms budget (60fps frame)\n              return Math.max(0, 16 - (performance.now() - start));\n            }\n          });\n        }, 0);\n      };\n    }\n  }\n\n  add(work: () => void): void {\n    this.queue.push(work);\n    this.totalItems++;\n    this.scheduleProcessing();\n  }\n\n  clear(): void {\n    this.queue.length = 0;\n    this.totalItems = 0;\n    this.processedItems = 0;\n    this.callbacks = {};\n  }\n\n  setCallbacks(callbacks: IdleSpacingCallbacks): void {\n    this.callbacks = callbacks;\n  }\n\n  get length(): number {\n    return this.queue.length;\n  }\n\n  get progress(): { processed: number; total: number; percentage: number } {\n    return {\n      processed: this.processedItems,\n      total: this.totalItems,\n      percentage: this.totalItems > 0 ? (this.processedItems / this.totalItems) * 100 : 0\n    };\n  }\n\n  private scheduleProcessing(): void {\n    if (!this.isProcessing && this.queue.length > 0) {\n      this.isProcessing = true;\n      this.requestIdleCallback((deadline) => this.process(deadline), { timeout: 5000 });\n    }\n  }\n\n  private process(deadline: IdleDeadline): void {\n    while (deadline.timeRemaining() > 0 && this.queue.length > 0) {\n      const work = this.queue.shift();\n      work?.();\n      this.processedItems++;\n      \n      // Call progress callback if provided\n      this.callbacks.onProgress?.(this.processedItems, this.totalItems);\n    }\n\n    this.isProcessing = false;\n    \n    if (this.queue.length > 0) {\n      this.scheduleProcessing();\n    } else if (this.processedItems === this.totalItems && this.totalItems > 0) {\n      // All work completed, call completion callback\n      this.callbacks.onComplete?.();\n      // Reset counters for next batch\n      this.totalItems = 0;\n      this.processedItems = 0;\n    }\n  }\n}\n\nclass PerformanceMonitor {\n  private metrics: Map<string, number[]> = new Map();\n  private enabled: boolean;\n\n  constructor(enabled = false) {\n    this.enabled = enabled;\n  }\n\n  measure<T>(label: string, fn: () => T): T {\n    if (!this.enabled) {\n      return fn();\n    }\n\n    const start = performance.now();\n    const result = fn();\n    const duration = performance.now() - start;\n    \n    if (!this.metrics.has(label)) {\n      this.metrics.set(label, []);\n    }\n    this.metrics.get(label)!.push(duration);\n    \n    return result;\n  }\n\n  getStats(label: string): PerformanceStats | null {\n    const times = this.metrics.get(label);\n    if (!times || times.length === 0) {\n      return null;\n    }\n\n    const total = times.reduce((a, b) => a + b, 0);\n    return {\n      count: times.length,\n      avg: total / times.length,\n      min: Math.min(...times),\n      max: Math.max(...times),\n      total\n    };\n  }\n\n  getAllStats(): PerformanceReport {\n    const report: PerformanceReport = {};\n    for (const [label] of this.metrics) {\n      const stats = this.getStats(label);\n      if (stats) {\n        report[label] = stats;\n      }\n    }\n    return report;\n  }\n\n  reset(): void {\n    this.metrics.clear();\n  }\n\n  setEnabled(enabled: boolean): void {\n    this.enabled = enabled;\n  }\n\n  logResults(): void {\n    if (!this.enabled) {\n      return;\n    }\n\n    const report = this.getAllStats();\n    if (Object.keys(report).length === 0) {\n      return;\n    }\n\n    console.group('🚀 Pangu.js Performance Report');\n    console.table(report);\n    console.groupEnd();\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction once<T extends (...args: any[]) => any>(func: T) {\n  let executed = false;\n  return function (...args: Parameters<T>) {\n    if (executed) {\n      return undefined;\n    }\n    executed = true;\n    return func(...args);\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction debounce<T extends (...args: any[]) => void>(func: T, delay: number, mustRunDelay: number = Infinity) {\n  let timer: number | null = null;\n  let startTime: number | null = null;\n\n  return function (...args: Parameters<T>) {\n    const currentTime = Date.now();\n\n    if (timer) {\n      clearTimeout(timer);\n    }\n\n    if (!startTime) {\n      startTime = currentTime;\n    }\n\n    if (currentTime - startTime >= mustRunDelay) {\n      func(...args);\n      startTime = currentTime;\n    } else {\n      timer = window.setTimeout(() => {\n        func(...args);\n      }, delay);\n    }\n  };\n}\n\nexport class BrowserPangu extends Pangu {\n  public isAutoSpacingPageExecuted: boolean;\n  protected autoSpacingPageObserver: MutationObserver | null;\n  protected performanceMonitor: PerformanceMonitor;\n  protected idleQueue: IdleQueue;\n  protected idleSpacingConfig: IdleSpacingConfig;\n  protected visibilityCheckConfig: VisibilityCheckConfig;\n\n  public blockTags: RegExp;\n  public ignoredTags: RegExp;\n  public presentationalTags: RegExp;\n  public spaceLikeTags: RegExp;\n  public spaceSensitiveTags: RegExp;\n  public ignoredClass: string;\n\n  constructor() {\n    super();\n\n    this.isAutoSpacingPageExecuted = false;\n    this.autoSpacingPageObserver = null;\n    \n    // Enable performance monitoring in development mode\n    const isDevelopment = typeof process !== 'undefined' && process.env?.NODE_ENV === 'development';\n    this.performanceMonitor = new PerformanceMonitor(isDevelopment);\n\n    // Initialize idle processing infrastructure\n    this.idleQueue = new IdleQueue();\n    this.idleSpacingConfig = {\n      enabled: false, // Disabled by default for backward compatibility\n      chunkSize: 10,  // Process 10 text nodes per idle cycle\n      timeout: 5000   // 5 second timeout for idle processing\n    };\n\n    // Initialize visibility check configuration\n    this.visibilityCheckConfig = {\n      enabled: true, // Enable for testing in Chrome extension\n      checkDuringIdle: true, // Use idle time for visibility checks\n      commonHiddenPatterns: {\n        clipRect: true,         // clip: rect(1px, 1px, 1px, 1px) patterns\n        displayNone: true,      // display: none\n        visibilityHidden: true, // visibility: hidden\n        opacityZero: true,      // opacity: 0\n        heightWidth1px: true    // height: 1px; width: 1px\n      }\n    };\n\n    this.blockTags = /^(div|p|h1|h2|h3|h4|h5|h6)$/i;\n    this.ignoredTags = /^(code|pre|script|style|textarea|iframe|input)$/i;\n    this.presentationalTags = /^(b|code|del|em|i|s|strong|kbd)$/i;\n    this.spaceLikeTags = /^(br|hr|i|img|pangu)$/i;\n    this.spaceSensitiveTags = /^(a|del|pre|s|strike|u)$/i;\n    this.ignoredClass = 'no-pangu-spacing';\n  }\n\n  public autoSpacingPage({ pageDelayMs = 1000, nodeDelayMs = 500, nodeMaxWaitMs = 2000 }: AutoSpacingPageConfig = {}) {\n    if (!(document.body instanceof Node)) {\n      return;\n    }\n\n    if (this.isAutoSpacingPageExecuted) {\n      return;\n    }\n\n    this.isAutoSpacingPageExecuted = true;\n\n    // FIXME\n    // Dirty hack for https://github.com/vinta/pangu.js/issues/117\n    const spacingPageOnce = once(() => {\n      this.spacingPage();\n    });\n    const videos = document.getElementsByTagName('video');\n    if (videos.length === 0) {\n      setTimeout(() => {\n        spacingPageOnce();\n      }, pageDelayMs);\n    } else {\n      for (let i = 0; i < videos.length; i++) {\n        const video = videos[i];\n        if (video.readyState === 4) {\n          setTimeout(() => {\n            spacingPageOnce();\n          }, 3000);\n          break;\n        }\n        video.addEventListener('loadeddata', () => {\n          setTimeout(() => {\n            spacingPageOnce();\n          }, 4000);\n        });\n      }\n    }\n\n    this.setupAutoSpacingPageObserver(nodeDelayMs, nodeMaxWaitMs);\n  }\n\n  public spacingPage() {\n    this.performanceMonitor.measure('spacingPage', () => {\n      this.spacingPageTitle();\n      this.spacingPageBody();\n    });\n    this.performanceMonitor.logResults();\n  }\n\n  public spacingPageTitle() {\n    this.performanceMonitor.measure('spacingPageTitle', () => {\n      const titleElement = document.querySelector('head > title');\n      if (titleElement) {\n        this.spacingNode(titleElement);\n      }\n    });\n  }\n\n  public spacingPageBody() {\n    this.performanceMonitor.measure('spacingPageBody', () => {\n      // Process the entire body element\n      // The collectTextNodes method already filters out:\n      // 1. Whitespace-only text nodes\n      // 2. Text inside ignored tags (script, style, textarea, etc.)\n      // 3. Text inside contentEditable elements\n      // 4. Text inside elements with no-pangu-spacing class\n      this.spacingNode(document.body);\n    });\n  }\n\n  public spacingNode(contextNode: Node) {\n    // Use TreeWalker to collect all text nodes in the DOM tree\n    // This handles cases like <div><span>中文</span>\"<span>ABC</span></div> where the quote is a direct child of the div\n    //\n    // The collectTextNodes helper filters out text nodes that contain only whitespace,\n    // ensuring we only process nodes with actual content\n    //\n    // Example HTML with CSS {white-space: pre-wrap}\n    //   <div>\n    //     \"整天等\"\n    //     \"EAS\"\n    //     \"build\"\n    //   </div>\n    //\n    // This creates these text nodes:\n    // 1. \"整天等\"     -> selected (has content)\n    // 2. \"\\n  \"      -> filtered out (whitespace only)\n    // 3. \"EAS\"       -> selected (has content)\n    // 4. \"\\n  \"      -> filtered out (whitespace only)\n    // 5. \"build\"     -> selected (has content)\n    //\n    // Without filtering whitespace, we'd process the whitespace nodes too, which would:\n    // - Impact performance (processing many empty nodes)\n    // - Add complexity (algorithm expects meaningful content)\n    //\n    // However, those filtered whitespace nodes still exist in the DOM and can render as spaces with CSS like {white-space: pre-wrap}.\n    // The processTextNodes method includes logic to detect whitespace between selected text nodes.\n    \n    this.spacingNodeWithTreeWalker(contextNode);\n  }\n\n  public spacingElementById(idName: string) {\n    const element = document.getElementById(idName);\n    if (element) {\n      this.spacingNode(element);\n    }\n  }\n\n  public spacingElementByClassName(className: string) {\n    const elements = document.getElementsByClassName(className);\n    for (let i = 0; i < elements.length; i++) {\n      this.spacingNode(elements[i]);\n    }\n  }\n\n  public spacingElementByTagName(tagName: string) {\n    const elements = document.getElementsByTagName(tagName);\n    for (let i = 0; i < elements.length; i++) {\n      this.spacingNode(elements[i]);\n    }\n  }\n\n\n  public stopAutoSpacingPage() {\n    if (this.autoSpacingPageObserver) {\n      this.autoSpacingPageObserver.disconnect();\n      this.autoSpacingPageObserver = null;\n    }\n\n    this.isAutoSpacingPageExecuted = false;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  protected isContentEditable(node: any) {\n    return node.isContentEditable || (node.getAttribute && node.getAttribute('g_editable') === 'true');\n  }\n\n  protected isSpecificTag(node: Node, tagRegex: RegExp) {\n    return node && node.nodeName && tagRegex.test(node.nodeName);\n  }\n\n  protected isInsideSpecificTag(node: Node, tagRegex: RegExp, checkCurrent = false) {\n    let currentNode = node;\n    if (checkCurrent) {\n      if (this.isSpecificTag(currentNode, tagRegex)) {\n        return true;\n      }\n    }\n    while (currentNode.parentNode) {\n      currentNode = currentNode.parentNode;\n      if (this.isSpecificTag(currentNode, tagRegex)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  protected hasIgnoredClass(node: Node) {\n    // Check the node itself if it's an element\n    if (node instanceof Element && node.classList.contains(this.ignoredClass)) {\n      return true;\n    }\n    // Check the parent node (for text nodes)\n    if (node.parentNode && node.parentNode instanceof Element && node.parentNode.classList.contains(this.ignoredClass)) {\n      return true;\n    }\n    return false;\n  }\n\n  protected canIgnoreNode(node: Node) {\n    let currentNode = node;\n    if (currentNode && (this.isSpecificTag(currentNode, this.ignoredTags) || this.isContentEditable(currentNode) || this.hasIgnoredClass(currentNode))) {\n      // We will skip processing any children of ignored elements, so don't need to check all ancestors\n      return true;\n    }\n    while (currentNode.parentNode) {\n      currentNode = currentNode.parentNode;\n      if (currentNode && (this.isSpecificTag(currentNode, this.ignoredTags) || this.isContentEditable(currentNode))) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n\n  protected isFirstTextChild(parentNode: Node, targetNode: Node) {\n    const { childNodes } = parentNode;\n\n    // 只判斷第一個含有 text 的 node\n    for (let i = 0; i < childNodes.length; i++) {\n      const childNode = childNodes[i];\n      if (childNode.nodeType !== Node.COMMENT_NODE && childNode.textContent) {\n        return childNode === targetNode;\n      }\n    }\n    return false;\n  }\n\n  protected isLastTextChild(parentNode: Node, targetNode: Node) {\n    const { childNodes } = parentNode;\n\n    // 只判斷倒數第一個含有 text 的 node\n    for (let i = childNodes.length - 1; i > -1; i--) {\n      const childNode = childNodes[i];\n      if (childNode.nodeType !== Node.COMMENT_NODE && childNode.textContent) {\n        return childNode === targetNode;\n      }\n    }\n    return false;\n  }\n\n  protected processTextNodes(textNodes: Node[]) {\n    let currentTextNode: Node | null;\n    let nextTextNode: Node | null = null;\n\n    // Process nodes in the order provided\n    for (let i = 0; i < textNodes.length; i++) {\n      currentTextNode = textNodes[i];\n      if (!currentTextNode) {\n        continue;\n      }\n\n      // Skip nodes that should be ignored\n      if (this.canIgnoreNode(currentTextNode)) {\n        nextTextNode = currentTextNode;\n        continue;\n      }\n\n      if (currentTextNode instanceof Text) {\n        // Special handling for standalone quote nodes\n        if (currentTextNode.data.length === 1 && /[\"\\u201c\\u201d]/.test(currentTextNode.data)) {\n          // Check context to determine if space is needed before the quote\n          if (currentTextNode.previousSibling) {\n            const prevNode = currentTextNode.previousSibling;\n            if (prevNode.nodeType === Node.ELEMENT_NODE && prevNode.textContent) {\n              const lastChar = prevNode.textContent.slice(-1);\n              // If previous element ends with CJK, add space before quote\n              if (/[\\u4e00-\\u9fff]/.test(lastChar)) {\n                currentTextNode.data = ` ${currentTextNode.data}`;\n              }\n            }\n          }\n        } else {\n          // Normal text processing\n          const newText = this.spacingText(currentTextNode.data);\n          if (currentTextNode.data !== newText) {\n            currentTextNode.data = newText;\n          }\n        }\n      }\n\n      // Handle nested tag text processing\n      if (nextTextNode) {\n        if (currentTextNode.nextSibling && this.spaceLikeTags.test(currentTextNode.nextSibling.nodeName)) {\n          nextTextNode = currentTextNode;\n          continue;\n        }\n\n        if (!(currentTextNode instanceof Text) || !(nextTextNode instanceof Text)) {\n          continue;\n        }\n\n        // Check if there's already proper spacing between nodes\n        const currentEndsWithSpace = currentTextNode.data.endsWith(' ');\n        const nextStartsWithSpace = nextTextNode.data.startsWith(' ');\n\n        // Check if there's whitespace between the nodes\n        let hasWhitespaceBetween = false;\n        \n        // We need to check at different levels of the DOM tree\n        // First, find the highest ancestor that contains only the current text node\n        let currentAncestor = currentTextNode as Node;\n        while (currentAncestor.parentNode && \n               this.isLastTextChild(currentAncestor.parentNode, currentAncestor) &&\n               !this.spaceSensitiveTags.test(currentAncestor.parentNode.nodeName)) {\n          currentAncestor = currentAncestor.parentNode;\n        }\n        \n        // Find the highest ancestor that contains only the next text node\n        let nextAncestor = nextTextNode as Node;\n        while (nextAncestor.parentNode && \n               this.isFirstTextChild(nextAncestor.parentNode, nextAncestor) &&\n               !this.spaceSensitiveTags.test(nextAncestor.parentNode.nodeName)) {\n          nextAncestor = nextAncestor.parentNode;\n        }\n        \n        // Check for whitespace between these ancestors\n        let nodeBetween = currentAncestor.nextSibling;\n        while (nodeBetween && nodeBetween !== nextAncestor) {\n          if (nodeBetween.nodeType === Node.TEXT_NODE && nodeBetween.textContent && /\\s/.test(nodeBetween.textContent)) {\n            hasWhitespaceBetween = true;\n            break;\n          }\n          nodeBetween = nodeBetween.nextSibling;\n        }\n\n        // Skip if proper spacing exists\n        if (currentEndsWithSpace || nextStartsWithSpace || hasWhitespaceBetween) {\n          nextTextNode = currentTextNode;\n          continue;\n        }\n\n        const testText = currentTextNode.data.slice(-1) + nextTextNode.data.slice(0, 1);\n        const testNewText = this.spacingText(testText);\n\n        // Special handling for quotes\n        const currentLast = currentTextNode.data.slice(-1);\n        const nextFirst = nextTextNode.data.slice(0, 1);\n        const isQuote = (char: string) => /[\"\\u201c\\u201d]/.test(char);\n        const isCJK = (char: string) => /[\\u4e00-\\u9fff]/.test(char);\n\n        const skipSpacing = (isQuote(currentLast) && isCJK(nextFirst)) || (isCJK(currentLast) && isQuote(nextFirst));\n\n        if (testNewText !== testText && !skipSpacing) {\n          let nextNode: Node = nextTextNode;\n          while (nextNode.parentNode && !this.spaceSensitiveTags.test(nextNode.nodeName) && this.isFirstTextChild(nextNode.parentNode, nextNode)) {\n            nextNode = nextNode.parentNode;\n          }\n\n          let currentNode: Node = currentTextNode;\n          while (currentNode.parentNode && !this.spaceSensitiveTags.test(currentNode.nodeName) && this.isLastTextChild(currentNode.parentNode, currentNode)) {\n            currentNode = currentNode.parentNode;\n          }\n\n          if (currentNode.nextSibling) {\n            if (this.spaceLikeTags.test(currentNode.nextSibling.nodeName)) {\n              nextTextNode = currentTextNode;\n              continue;\n            }\n          }\n\n          if (!this.blockTags.test(currentNode.nodeName)) {\n            if (!this.spaceSensitiveTags.test(nextNode.nodeName)) {\n              if (!this.ignoredTags.test(nextNode.nodeName) && !this.blockTags.test(nextNode.nodeName)) {\n                if (nextTextNode.previousSibling) {\n                  if (!this.spaceLikeTags.test(nextTextNode.previousSibling.nodeName)) {\n                    if (nextTextNode instanceof Text && !nextTextNode.data.startsWith(' ')) {\n                      // Check visibility before adding space\n                      if (!this.shouldSkipSpacingAfterNode(currentTextNode)) {\n                        nextTextNode.data = ` ${nextTextNode.data}`;\n                      }\n                    }\n                  }\n                } else {\n                  if (!this.canIgnoreNode(nextTextNode)) {\n                    if (nextTextNode instanceof Text && !nextTextNode.data.startsWith(' ')) {\n                      // Check visibility before adding space\n                      if (!this.shouldSkipSpacingAfterNode(currentTextNode)) {\n                        nextTextNode.data = ` ${nextTextNode.data}`;\n                      }\n                    }\n                  }\n                }\n              }\n            } else if (!this.spaceSensitiveTags.test(currentNode.nodeName)) {\n              if (currentTextNode instanceof Text && !currentTextNode.data.endsWith(' ')) {\n                // Check visibility before adding space\n                if (!this.shouldSkipSpacingAfterNode(currentTextNode)) {\n                  currentTextNode.data = `${currentTextNode.data} `;\n                }\n              }\n            } else {\n              // Check visibility before inserting space element\n              if (!this.shouldSkipSpacingAfterNode(currentTextNode)) {\n                const panguSpace = document.createElement('pangu');\n                panguSpace.innerHTML = ' ';\n\n                if (nextNode.parentNode) {\n                  if (nextNode.previousSibling) {\n                    if (!this.spaceLikeTags.test(nextNode.previousSibling.nodeName)) {\n                      nextNode.parentNode.insertBefore(panguSpace, nextNode);\n                    }\n                  } else {\n                    nextNode.parentNode.insertBefore(panguSpace, nextNode);\n                  }\n                }\n\n                // Clean up orphaned space element\n                if (!panguSpace.previousElementSibling) {\n                  if (panguSpace.parentNode) {\n                    panguSpace.parentNode.removeChild(panguSpace);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      nextTextNode = currentTextNode;\n    }\n  }\n\n  protected collectTextNodes(contextNode: Node, reverse = false): Text[] {\n    const nodes: Text[] = [];\n    \n    // Handle edge cases\n    if (!contextNode || contextNode instanceof DocumentFragment) {\n      return nodes;\n    }\n\n    const walker = document.createTreeWalker(\n      contextNode,\n      NodeFilter.SHOW_TEXT,\n      {\n        acceptNode: (node) => {\n          // Skip whitespace-only nodes\n          if (!node.nodeValue || !/\\S/.test(node.nodeValue)) {\n            return NodeFilter.FILTER_REJECT;\n          }\n          \n          // Skip nodes that should be ignored (same as canIgnoreNode check)\n          // We need to check the node itself and its ancestors\n          let currentNode = node;\n          while (currentNode) {\n            if (currentNode instanceof Element) {\n              // Check for ignored tags\n              if (this.ignoredTags.test(currentNode.nodeName)) {\n                return NodeFilter.FILTER_REJECT;\n              }\n              // Check for contentEditable\n              if (this.isContentEditable(currentNode)) {\n                return NodeFilter.FILTER_REJECT;\n              }\n              // Check for ignored class\n              if (currentNode.classList.contains(this.ignoredClass)) {\n                return NodeFilter.FILTER_REJECT;\n              }\n            }\n            currentNode = currentNode.parentNode as Node;\n          }\n          \n          return NodeFilter.FILTER_ACCEPT;\n        }\n      }\n    );\n\n    // Collect all text nodes\n    while (walker.nextNode()) {\n      nodes.push(walker.currentNode as Text);\n    }\n\n    // Return in reverse order if requested\n    return reverse ? nodes.reverse() : nodes;\n  }\n\n  protected spacingNodeWithTreeWalker(contextNode: Node) {\n    // DocumentFragments don't support TreeWalker properly\n    if (!(contextNode instanceof Node) || contextNode instanceof DocumentFragment) {\n      return;\n    }\n\n    // Use TreeWalker to collect text nodes with content\n    const textNodes = this.performanceMonitor.measure('collectTextNodes', () => {\n      return this.collectTextNodes(contextNode, true);\n    });\n\n    // Choose processing method based on idle spacing configuration\n    if (this.idleSpacingConfig.enabled) {\n      this.processTextNodesWithIdleCallback(textNodes);\n    } else {\n      // Process the collected text nodes using the shared logic (synchronous)\n      this.performanceMonitor.measure('processTextNodes', () => {\n        this.processTextNodes(textNodes);\n      });\n    }\n  }\n\n  protected processTextNodesWithIdleCallback(textNodes: Node[], callbacks?: IdleSpacingCallbacks): void {\n    if (textNodes.length === 0) {\n      callbacks?.onComplete?.();\n      return;\n    }\n\n    // Clear any existing work from previous calls\n    this.idleQueue.clear();\n\n    // Set up callbacks for progress tracking\n    if (callbacks) {\n      this.idleQueue.setCallbacks(callbacks);\n    }\n\n    // Split text nodes into chunks\n    const chunkSize = this.idleSpacingConfig.chunkSize;\n    const chunks: Node[][] = [];\n    \n    for (let i = 0; i < textNodes.length; i += chunkSize) {\n      chunks.push(textNodes.slice(i, i + chunkSize));\n    }\n\n    // Add each chunk as a work item to the idle queue\n    chunks.forEach((chunk, index) => {\n      this.idleQueue.add(() => {\n        this.performanceMonitor.measure(`processTextNodesChunk${index}`, () => {\n          this.processTextNodes(chunk);\n        });\n      });\n    });\n  }\n\n  protected setupAutoSpacingPageObserver(nodeDelayMs: number, nodeMaxWaitMs: number) {\n    // Disconnect any existing auto-spacing observer\n    if (this.autoSpacingPageObserver) {\n      this.autoSpacingPageObserver.disconnect();\n      this.autoSpacingPageObserver = null;\n    }\n\n    const queue: Node[] = [];\n\n    const debouncedSpacingTitle = debounce(\n      () => {\n        this.spacingPageTitle();\n      },\n      nodeDelayMs,\n      nodeMaxWaitMs,\n    );\n\n    const debouncedSpacingNode = debounce(\n      () => {\n        // NOTE: a single node could be very big which contains a lot of child nodes\n        if (this.idleSpacingConfig.enabled) {\n          // Use idle processing for dynamic content\n          const nodesToProcess = [...queue];\n          queue.length = 0; // Clear the queue\n          \n          if (nodesToProcess.length > 0) {\n            this.spacingNodesWithIdleCallback(nodesToProcess);\n          }\n        } else {\n          // Synchronous processing (original behavior)\n          while (queue.length) {\n            const node = queue.shift();\n            if (node) {\n              this.spacingNode(node);\n            }\n          }\n        }\n      },\n      nodeDelayMs,\n      nodeMaxWaitMs,\n    );\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\n    this.autoSpacingPageObserver = new MutationObserver((mutations) => {\n      let titleChanged = false;\n\n      // Element: https://developer.mozilla.org/en-US/docs/Web/API/Element\n      // Text: https://developer.mozilla.org/en-US/docs/Web/API/Text\n      for (const mutation of mutations) {\n        // Skip to avoid double processing - title handled separately by debouncedSpacingTitle()\n        if (mutation.target.parentNode?.nodeName === 'TITLE' || mutation.target.nodeName === 'TITLE') {\n          titleChanged = true;\n          continue;\n        }\n\n        // Queue parent elements for spacing processing\n        switch (mutation.type) {\n          case 'characterData':\n            // Text content changed (e.g., textContent = '新文字new text')\n            const { target: node } = mutation;\n            if (node.nodeType === Node.TEXT_NODE && node.parentNode) {\n              // <p>Hello 世界</p>\n              // \"Hello 世界\" is the text node, <p> is the parent element\n              queue.push(node.parentNode); // Queue parent element, not text node\n            }\n            break;\n          case 'childList':\n            // New nodes added to DOM (e.g., innerHTML change, appendChild)\n            for (const node of mutation.addedNodes) {\n              if (node.nodeType === Node.ELEMENT_NODE) {\n                queue.push(node); // Element added, process its text content\n              } else if (node.nodeType === Node.TEXT_NODE && node.parentNode) {\n                queue.push(node.parentNode); // Text node added, process its parent\n              }\n            }\n            break;\n          default:\n            break;\n        }\n      }\n\n      if (titleChanged) {\n        debouncedSpacingTitle();\n      }\n\n      debouncedSpacingNode();\n    });\n\n    // NOTE: A single MutationObserver can observe multiple targets simultaneously\n    // https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/observe:\n\n    // Observe page content changes\n    this.autoSpacingPageObserver.observe(document.body, {\n      characterData: true,\n      childList: true,\n      subtree: true,\n    });\n\n    // Observe page title changes\n    this.autoSpacingPageObserver.observe(document.head, {\n      characterData: true,\n      childList: true,\n      subtree: true, // Need subtree to observe text node changes inside title\n    });\n  }\n\n  // Performance monitoring methods\n\n  public enablePerformanceMonitoring(): void {\n    this.performanceMonitor.setEnabled(true);\n  }\n\n  public disablePerformanceMonitoring(): void {\n    this.performanceMonitor.setEnabled(false);\n  }\n\n  public getPerformanceReport(): PerformanceReport {\n    return this.performanceMonitor.getAllStats();\n  }\n\n  public getPerformanceStats(label: string): PerformanceStats | null {\n    return this.performanceMonitor.getStats(label);\n  }\n\n  public resetPerformanceMetrics(): void {\n    this.performanceMonitor.reset();\n  }\n\n  public logPerformanceResults(): void {\n    this.performanceMonitor.logResults();\n  }\n\n  // Idle processing configuration methods\n\n  public enableIdleSpacing(config?: Partial<IdleSpacingConfig>): void {\n    this.idleSpacingConfig = {\n      ...this.idleSpacingConfig,\n      enabled: true,\n      ...config\n    };\n  }\n\n  public disableIdleSpacing(): void {\n    this.idleSpacingConfig.enabled = false;\n    this.idleQueue.clear();\n  }\n\n  public getIdleSpacingConfig(): IdleSpacingConfig {\n    return { ...this.idleSpacingConfig };\n  }\n\n  public getIdleQueueLength(): number {\n    return this.idleQueue.length;\n  }\n\n  public clearIdleQueue(): void {\n    this.idleQueue.clear();\n  }\n\n  public getIdleProgress(): { processed: number; total: number; percentage: number } {\n    return this.idleQueue.progress;\n  }\n\n  public spacingPageWithIdleCallback(callbacks?: IdleSpacingCallbacks): void {\n    if (!this.idleSpacingConfig.enabled) {\n      // Fallback to synchronous processing if idle spacing is disabled\n      this.spacingPage();\n      callbacks?.onComplete?.();\n      return;\n    }\n\n    // Process title synchronously (it's typically small)\n    this.spacingPageTitle();\n    \n    // Process body with idle callback\n    this.spacingNodeWithIdleCallback(document.body, callbacks);\n  }\n\n  public spacingNodeWithIdleCallback(contextNode: Node, callbacks?: IdleSpacingCallbacks): void {\n    if (!this.idleSpacingConfig.enabled) {\n      // Fallback to synchronous processing if idle spacing is disabled\n      this.spacingNode(contextNode);\n      callbacks?.onComplete?.();\n      return;\n    }\n\n    // DocumentFragments don't support TreeWalker properly\n    if (!(contextNode instanceof Node) || contextNode instanceof DocumentFragment) {\n      callbacks?.onComplete?.();\n      return;\n    }\n\n    // Use TreeWalker to collect text nodes with content\n    const textNodes = this.performanceMonitor.measure('collectTextNodes', () => {\n      return this.collectTextNodes(contextNode, true);\n    });\n\n    // Process with idle callback\n    this.processTextNodesWithIdleCallback(textNodes, callbacks);\n  }\n\n  public spacingNodesWithIdleCallback(nodes: Node[], callbacks?: IdleSpacingCallbacks): void {\n    if (!this.idleSpacingConfig.enabled) {\n      // Fallback to synchronous processing if idle spacing is disabled\n      for (const node of nodes) {\n        this.spacingNode(node);\n      }\n      callbacks?.onComplete?.();\n      return;\n    }\n\n    if (nodes.length === 0) {\n      callbacks?.onComplete?.();\n      return;\n    }\n\n    // Collect all text nodes from all input nodes\n    const allTextNodes: Node[] = [];\n    for (const node of nodes) {\n      // Skip DocumentFragments as they don't support TreeWalker properly\n      if (!(node instanceof Node) || node instanceof DocumentFragment) {\n        continue;\n      }\n\n      const textNodes = this.performanceMonitor.measure('collectTextNodes', () => {\n        return this.collectTextNodes(node, true);\n      });\n      \n      allTextNodes.push(...textNodes);\n    }\n\n    // Process all collected text nodes with idle callback\n    this.processTextNodesWithIdleCallback(allTextNodes, callbacks);\n  }\n\n  // Visibility check configuration methods\n\n  public enableVisibilityCheck(config?: Partial<VisibilityCheckConfig>): void {\n    this.visibilityCheckConfig = {\n      ...this.visibilityCheckConfig,\n      enabled: true,\n      ...config\n    };\n  }\n\n  public disableVisibilityCheck(): void {\n    this.visibilityCheckConfig.enabled = false;\n  }\n\n  public getVisibilityCheckConfig(): VisibilityCheckConfig {\n    return { ...this.visibilityCheckConfig };\n  }\n\n  // Visibility checking utility methods\n\n  public isElementVisuallyHidden(element: Element): boolean {\n    if (!this.visibilityCheckConfig.enabled) {\n      return false;\n    }\n\n    const style = window.getComputedStyle(element);\n    const config = this.visibilityCheckConfig.commonHiddenPatterns;\n\n    // Check display: none\n    if (config.displayNone && style.display === 'none') {\n      return true;\n    }\n\n    // Check visibility: hidden\n    if (config.visibilityHidden && style.visibility === 'hidden') {\n      return true;\n    }\n\n    // Check opacity: 0\n    if (config.opacityZero && parseFloat(style.opacity) === 0) {\n      return true;\n    }\n\n    // Check clip: rect patterns (screen reader only content)\n    if (config.clipRect) {\n      const clip = style.clip;\n      // Common patterns: rect(1px, 1px, 1px, 1px) or rect(0, 0, 0, 0)\n      if (clip && (\n        clip.includes('rect(1px, 1px, 1px, 1px)') ||\n        clip.includes('rect(0px, 0px, 0px, 0px)') ||\n        clip.includes('rect(0, 0, 0, 0)')\n      )) {\n        return true;\n      }\n    }\n\n    // Check height: 1px; width: 1px patterns\n    if (config.heightWidth1px) {\n      const height = parseInt(style.height, 10);\n      const width = parseInt(style.width, 10);\n      \n      if (height === 1 && width === 1) {\n        // Additional checks for common screen reader patterns\n        const overflow = style.overflow;\n        const position = style.position;\n        \n        if (overflow === 'hidden' && position === 'absolute') {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  protected shouldSkipSpacingAfterNode(node: Node): boolean {\n    if (!this.visibilityCheckConfig.enabled) {\n      return false;\n    }\n\n    // Check if the node or its parent element is visually hidden\n    let elementToCheck: Element | null = null;\n    \n    if (node instanceof Element) {\n      elementToCheck = node;\n    } else if (node.parentElement) {\n      elementToCheck = node.parentElement;\n    }\n\n    if (elementToCheck && this.isElementVisuallyHidden(elementToCheck)) {\n      return true;\n    }\n\n    // Check if any ancestor is visually hidden\n    let currentElement = elementToCheck?.parentElement;\n    while (currentElement) {\n      if (this.isElementVisuallyHidden(currentElement)) {\n        return true;\n      }\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n}\n\nexport const pangu = new BrowserPangu();\n\nexport default pangu;\n","import pangu, { BrowserPangu } from './pangu';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(pangu as any).BrowserPangu = BrowserPangu;\n\n// Declare global for UMD builds\ndeclare global {\n  interface Window {\n    pangu: typeof pangu & { BrowserPangu: typeof BrowserPangu };\n  }\n}\n\nexport default pangu;\n"],"names":["self","text","node"],"mappings":"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"}